@page "/Tournament/List/{TournamentWasDeleted:bool?}"

@using TournamentManagementLogic.Model
@using TournamentManagementLogic.Service.Interfaces

@inject ITournamentService TournamentService

<PageTitle>Tournaments</PageTitle>

<div class="container-fluid">
    <div class="row row-cols-1 justify-content-start">
        <h3 class="col text-center">Tournaments</h3>
    </div>

    <Alert AlertText="The tournament has been deleted." Type="Alert.AlertType.Success" EnableCloseBtn="true" @ref="_tournamentDeleted" />

    <TournamentCreate OnTournamentCreated="@OnTournamentCreated" />

    @if (_tournaments == null)
    {
        <div class="row row-cols-1 justify-content-start">
            <p class="col"><em>Loading tournaments...</em></p>
        </div>
    }
    else
    {
        <div class="row justify-content-center mt-3">

            @foreach (var tournament in _tournaments)
            {
                <TournamentCard Tournament="@tournament" />
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public bool? TournamentWasDeleted { get; set; }

    private IEnumerable<TournamentModel>? _tournaments;
    private Alert _tournamentDeleted;

    protected override async Task OnInitializedAsync()
    {
        _tournaments = TournamentService.GetTournaments();

        await Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            TryShowDeleteAlert();
        }
    }

    private void TryShowDeleteAlert()
    {
        if (!TournamentWasDeleted.HasValue)
        {
            return;
        }

        var tournamentWasDeleted = TournamentWasDeleted.Value;

        if (!tournamentWasDeleted)
        {
            return;
        }

        _tournamentDeleted.ShowAlert();
        StateHasChanged();
    }

    private void OnTournamentCreated()
    {
        _tournaments = TournamentService.GetTournaments();

        StateHasChanged();
    }
}
