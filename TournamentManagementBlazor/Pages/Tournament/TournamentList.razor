@page "/Tournament/List"
@using TournamentManagementLogic.Model
@using TournamentManagementLogic.Service.Interfaces
@using TournamentManagementBlazor.Model.Tournament
@inject ITournamentService TournamentService

<PageTitle>Tournaments</PageTitle>

<div class="container-fluid">
    <div class="row row-cols-1 justify-content-start">
        <h3 class="col text-center">Tournaments</h3>
    </div>

    <TournamentCreate OnTournamentCreated="@OnTournamentCreated" />

    @if (_tournaments == null)
    {
        <div class="row row-cols-1 justify-content-center"></div>
        <p class="col text-center"><em>Loading...</em></p>
    }
    else
    {
        <div class="row justify-content-center mt-3">

            @foreach (var tournament in _tournaments)
            {
                <TournamentCard Tournament="@tournament"/>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<TournamentModel>? _tournaments;

    protected override async Task OnInitializedAsync()
    {
        _tournaments = TournamentService.GetTournaments();
        await Task.CompletedTask;
    }

    private void OnTournamentCreated(TournamentCreateModel newTournament)
    {
        var teamsNames = newTournament.Teams.Select(t => t.Name);
        TournamentService.CreateTournament(newTournament.TournamentName, newTournament.GameName, newTournament.TournamentDescription, teamsNames);
        _tournaments = TournamentService.GetTournaments();

        StateHasChanged();
    }
}
