
<div class="@string.Concat(CollapseClass, " col-12 alert ", AlertClass)">
    <span>@Text</span>

    @if (EnableCloseBtn)
    {
        <button type="button" class="btn-close" aria-label="Close" @onclick="()=>HideAlert()"></button>
    }
</div>

@code {
    [Parameter]
    public string AlertText { get; set; } = string.Empty;

    [Parameter]
    public AlertType Type { get; set; }

    [Parameter]
    public bool EnableCloseBtn { get; set; }

    [Parameter]
    public bool AllowStacking { get; set; }

    private int _stackCount;
    private bool _showAlert;

    private string CollapseClass => _showAlert ? "collapse.show" : "collapse";
    private string Text => _stackCount > 1 ? $"{AlertText} * {_stackCount}" : AlertText;
    private string AlertClass => $"alert-{Type.ToString().ToLower()}";

    public void ShowAlert(bool resetStack = false)
    {
        _showAlert = true;

        if (resetStack)
        {
            _stackCount = 1;
            return;
        }

        _stackCount++;
        ClampStackCount();
    }

    public void HideAlert(bool clearStack = false)
    {
        if (clearStack)
        {
            _stackCount = 0;
            _showAlert = false;

            return;
        }

        _stackCount--;
        ClampStackCount();

        if (_stackCount == 0)
        {
            _showAlert = false;
        }
    }

    private void ClampStackCount()
    {
        var maxStack = int.MaxValue;

        if (!AllowStacking)
        {
            maxStack = 1;
        }

        _stackCount = Math.Clamp(_stackCount, 0, maxStack);
    }

    public enum AlertType
    {
        Primary,
        Secondary,
        Success,
        Danger,
        Warning,
        Info,
        Light,
        Dark
    }
}
