
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
using System.Text.RegularExpressions;
using Terminal.Gui;
using TournamentManagementConsoleUi.Logic.Model;
using TournamentManagementConsoleUi.View.Logic;

#nullable enable

namespace TournamentManagementConsoleUi.View.Windows
{
    public partial class MatchWindow
    {
        private readonly MatchBasicModel _model;
        private readonly List<SetModel> _sets;

        private SetModel? _selectedSet;

        public MatchWindow(Guid matchId, Guid tournamentId)
        {
            InitializeComponent();

            _model = Program.MatchService.GetMatchById(matchId);
            _sets = Program.SetService.GetSetsForMatch(_model.Id);

            dateField.Date = _model.Date?.ToDateTime(TimeOnly.MinValue) ?? DateTime.MinValue;
            dateField.DateChanged += DateFieldDateChanged;

            SetupTeamsNames();

            SetupSets();

            AddCommand(Command.QuitToplevel, () => { Program.ChangeTopLevel(new TournamentWindow(tournamentId)); return true; });

            addSetBtn.Clicked += AddSetBtnClicked;
            removeSetBtn.Clicked += RemoveSetBtnClicked;

            setsListView.SelectedItemChanged += SetsListViewSelectedItemChanged;

            saveNewScoreBtn.Clicked += SaveNewScoreBtnClicked;

            setWinnerBtn.Clicked += SetWinnerBtnClicked;
        }

        private void SetWinnerBtnClicked()
        {
            var index = MessageBox.Query("Set Winner", "Set winner or clear.", "Clear", firstTeamLabel.Text,
                secondTeamLabel.Text, "Cancel");

            switch (index)
            {
                case 3:
                    return;
                case 0:
                    _model.ClearWinner();
                    break;
            }

            _model.SetWinner(index - 1);

            Program.MatchService.UpdateMatchWinner(_model);

            SetupTeamsNames();
        }

        private void SaveNewScoreBtnClicked()
        {
            if (_selectedSet is null)
            {
                return;
            }

            if (!int.TryParse(firstScoreTextField.Text.ToString(), out var firstScore) ||
                !int.TryParse(secondScoreTextField.Text.ToString(), out var secondScore))
            {
                return;
            }

            _selectedSet.FirstTeamScore = firstScore;
            _selectedSet.SecondTeamScore = secondScore;

            Program.SetService.UpdateScores(_selectedSet);
        }

        private void SetsListViewSelectedItemChanged(ListViewItemEventArgs args)
        {
            if (args.Value is not SetModel set)
            {
                return;
            }

            _selectedSet = set;

            firstScoreTextField.Text = _selectedSet.FirstTeamScore.ToString();
            secondScoreTextField.Text = _selectedSet.SecondTeamScore.ToString();
        }

        private void RemoveSetBtnClicked()
        {
            if (_selectedSet is null)
            {
                return;
            }

            _sets.Remove(_selectedSet);
            setsListView.SetNeedsDisplay();

            Program.SetService.DeleteSet(_selectedSet.Id);

            _selectedSet = null;

            firstScoreTextField.Text = string.Empty;
            secondScoreTextField.Text = string.Empty;
        }

        private void AddSetBtnClicked()
        {
            var newSetId = Program.SetService.CreateEmptySet(_model.Id);

            var newSet = Program.SetService.GetSet(newSetId);

            _sets.Add(newSet);
            setsListView.SetNeedsDisplay();
        }

        private void DateFieldDateChanged(DateTimeEventArgs<DateTime> args)
        {
            _model.Date = DateOnly.FromDateTime(args.NewValue);

            Program.MatchService.UpdateMatchDate(_model);
        }

        private void SetupSets()
        {
            _sets.Sort((x, y) =>
            {
                if (x.SetNumber < y.SetNumber) return -1;
                return x.SetNumber > y.SetNumber ? 1 : 0;
            });

            setsListView.Source = new SetListWrapper(_sets);

            firstScoreTextField.Text = string.Empty;
            secondScoreTextField.Text = string.Empty;
        }

        private void SetupTeamsNames()
        {
            var firstTeamName = string.Empty;
            var secondTeamName = string.Empty;

            if (_model.FirstTeam is not null)
            {
                var firstTeam = Program.TeamService.GetTeam(_model.FirstTeam.Value);
                firstTeamName = firstTeam.Name;

                if (_model.Winner == firstTeam.Id)
                {
                    firstTeamName = "🥇" + firstTeamName;
                }
            }

            if (_model.SecondTeam is not null)
            {
                var secondTeam = Program.TeamService.GetTeam(_model.SecondTeam.Value);

                secondTeamName = secondTeam.Name;

                if (_model.Winner == secondTeam.Id)
                {
                    secondTeamName = "🥇" + secondTeamName;
                }
            }

            firstTeamLabel.Text = firstTeamName;
            secondTeamLabel.Text = secondTeamName;
        }
    }
}
