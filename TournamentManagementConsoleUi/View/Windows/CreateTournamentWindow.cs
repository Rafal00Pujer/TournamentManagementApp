
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
using Terminal.Gui;
using TournamentManagementConsoleUi.View.Dialogs;

#nullable enable

namespace TournamentManagementConsoleUi.View.Windows
{
    public partial class CreateTournamentWindow
    {
        private readonly List<string> _teams = new();

        public CreateTournamentWindow()
        {
            InitializeComponent();

            AddCommand(Command.QuitToplevel, () => { Program.ChangeTopLevel(new TorunamentsListWindow()); return true; });

            teamsListView.SetSource(_teams);

            createTournamentBtn.Clicked += CreateTournamentBtnClicked;
            randomizeTeamsBtn.Clicked += RandomizeTeamsBtnClicked;
            addTeamBtn.Clicked += AddTeamBtnClicked;
            removeTeamBtn.Clicked += RemoveTeamBtnClicked;
        }

        private void RemoveTeamBtnClicked()
        {
            var selectedTeamIndex = teamsListView.SelectedItem;

            if (selectedTeamIndex < 0 || selectedTeamIndex >= _teams.Count)
            {
                return;
            }

            _teams.RemoveAt(selectedTeamIndex);
            teamsListView.SetNeedsDisplay();
        }

        private void AddTeamBtnClicked()
        {
            var createTeamDialog = new CreateTeamDialog();

            Application.Run(createTeamDialog);

            if (createTeamDialog.Data is not string teamName)
            {
                return;
            }

            _teams.Add(teamName);

            teamsListView.SetNeedsDisplay();
        }

        private void RandomizeTeamsBtnClicked()
        {
            var n = _teams.Count;

            while (n > 1)
            {
                var k = Random.Shared.Next(n);
                n--;

                (_teams[k], _teams[n]) = (_teams[n], _teams[k]);
            }

            teamsListView.SetNeedsDisplay();
        }

        private void CreateTournamentBtnClicked()
        {
            var name = nameTextField.Text.ToString();

            if (string.IsNullOrWhiteSpace(name))
            {
                MessageBox.ErrorQuery("Create Tournament Error", "The name field must be filled in.", "Ok");

                return;
            }

            name = name.Trim();

            var gameName = gameNameTextField.Text.ToString();

            gameName = string.IsNullOrWhiteSpace(gameName) ? string.Empty : gameName.Trim();

            var description = descriptionTextField.Text.ToString();

            description = string.IsNullOrWhiteSpace(description) ? string.Empty : description.Trim();

            if (_teams.Count == 0)
            {
                MessageBox.ErrorQuery("Create Tournament Error", "Tournament must have at least one team.", "Ok");

                return;
            }

            var tournamentId = CreateTournament(name, gameName, description);

            MessageBox.Query("Create Tournament", "Tournament created successfully.", "Ok");

            Program.ChangeTopLevel(new TournamentWindow(tournamentId));
        }

        private Guid CreateTournament(string name, string gameName, string description)
        {
            var tournamentId = Program.TournamentService.CreateTournament(name, gameName, description);

            var teamIds = CreateTeams(tournamentId);

            CreateMatches(teamIds, tournamentId);

            return tournamentId;
        }

        private List<Guid> CreateTeams(Guid tournamentId)
        {
            return _teams.Select(teamName => Program.TeamService.CreateTeam(teamName, tournamentId)).ToList();
        }

        private void CreateMatches(List<Guid> teamIds, Guid tournamentId)
        {
            /*var numberOfRounds = 1;
            var num = 2;

            while (_teams.Count < num)
            {
                num *= 2;
                numberOfRounds++;
            }

            var numberOfByes = num - _teams.Count;*/

            CreateMatch(teamIds);
            return;

            Guid CreateMatch(IReadOnlyList<Guid> availableTeamIds)
            {
                if (availableTeamIds.Count > 2)
                {
                    var teamsAreEven = availableTeamIds.Count % 2 == 0;
                    var halfCount = availableTeamIds.Count / 2;

                    var firstHalfOfTeamIds = availableTeamIds.Take(halfCount).ToList();
                    var secondHalfOfTeamIds = availableTeamIds.TakeLast(halfCount + (teamsAreEven ? 0 : 1)).ToList();

                    /*var SecondMatchId = CreateMatch(secondHalfOfTeamIds);

                    if (firstHalfOfTeamIds.Count == 1)
                    {
                        return Program.MatchService.CreateMatch(null, SecondMatchId, firstHalfOfTeamIds[0], null);
                    }

                    var firstMatchId = CreateMatch(firstHalfOfTeamIds);

                    return Program.MatchService.CreateMatch(firstMatchId, SecondMatchId, null, null);*/

                    Guid? firstTeamId = null;
                    Guid? firstMatchId = null;

                    if (firstHalfOfTeamIds.Count == 1)
                    {
                        firstTeamId = firstHalfOfTeamIds[0];
                    }
                    else
                    {
                        firstMatchId = CreateMatch(firstHalfOfTeamIds);
                    }

                    var secondMatchId = CreateMatch(secondHalfOfTeamIds);

                    return Program.MatchService.CreateMatch(tournamentId, firstMatchId, secondMatchId, firstTeamId, null);
                }
                else
                {
                    Guid firstTeamId = availableTeamIds[0];
                    Guid? secondTeamId = null;

                    if (availableTeamIds.Count > 1)
                    {
                        secondTeamId = availableTeamIds[1];
                    }

                    return Program.MatchService.CreateMatch(tournamentId, null, null, firstTeamId, secondTeamId);
                }
            }
        }
    }
}
