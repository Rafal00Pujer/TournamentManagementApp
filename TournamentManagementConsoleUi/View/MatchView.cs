
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
using Terminal.Gui;
using TournamentManagementConsoleUi.Logic.Model;
using TournamentManagementConsoleUi.View.Windows;

#nullable enable

namespace TournamentManagementConsoleUi.View
{
    public partial class MatchView
    {
        public const int WidthConst = 20;
        public const int HeightConst = 6;

        public MatchView(MatchWithDependencyModel match, Guid tournamentId)
        {
            InitializeComponent();

            var sets = Program.SetService.GetSetsForMatch(match.Id);
            sets.Sort((x, y) =>
            {
                if (x.SetNumber < y.SetNumber) return -1;
                return x.SetNumber > y.SetNumber ? 1 : 0;
            });

            SetTeamsStrings(match, sets);

            editBtn.Clicked += () => Program.ChangeTopLevel(new MatchWindow(match.Id, tournamentId));
        }

        private void SetTeamsStrings(MatchWithDependencyModel match, List<SetModel> sets)
        {
            var (firstTeamName, secondTeamName) = CreateTeamsNames(match);

            var (firstTeamsSets, secondTeamsSets) = CreateTeamsSets(sets);

            if (firstTeamName.Length + firstTeamsSets.Length > 20 - 3)
            {
                var maxlength = 20 - 3 - firstTeamsSets.Length - 3;

                firstTeamName = firstTeamName[..maxlength] + "...";
            }
            else
            {
                firstTeamName = firstTeamName.PadRight(20 - 3 - firstTeamsSets.Length);
            }

            if (secondTeamName.Length + secondTeamsSets.Length > 20 - 3)
            {
                var maxlength = 20 - 3 - secondTeamsSets.Length - 3;

                secondTeamName = secondTeamName[..maxlength] + "...";
            }
            else
            {
                secondTeamName = secondTeamName.PadRight(20 - 3 - secondTeamsSets.Length);
            }

            firstTeamLabel.Text = firstTeamName + " " + firstTeamsSets;
            secondTeamLabel.Text = secondTeamName + " " + secondTeamsSets;
        }

        private static (string firstTeamsSets, string secondTeamsSets) CreateTeamsSets(List<SetModel> sets)
        {
            var firstTeamsSets = string.Empty;
            var secondTeamsSets = string.Empty;

            if (sets.Count > 3)
            {
                firstTeamsSets = $"{sets[0].FirstTeamScore}..{sets[^1].FirstTeamScore}";
                secondTeamsSets = $"{sets[0].SecondTeamScore}..{sets[^1].SecondTeamScore}";
            }
            else if (sets.Count > 0)
            {
                foreach (var set in sets)
                {
                    firstTeamsSets += $"{set.FirstTeamScore} ";
                    secondTeamsSets += $"{set.SecondTeamScore} ";
                }

                firstTeamsSets = firstTeamsSets.Remove(firstTeamsSets.Length - 1);
                secondTeamsSets = secondTeamsSets.Remove(secondTeamsSets.Length - 1);
            }
            else
            {
                firstTeamsSets = "0";
                secondTeamsSets = "0";
            }

            return (firstTeamsSets, secondTeamsSets);
        }

        private static (string firstTeamName, string secondTeamName) CreateTeamsNames(MatchWithDependencyModel match)
        {
            var firstTeamName = string.Empty;
            var secondTeamName = string.Empty;

            if (match.FirstTeam is not null)
            {
                var firstTeam = Program.TeamService.GetTeam(match.FirstTeam.Value);

                firstTeamName = firstTeam.Name;

                if (match.Winner == firstTeam.Id)
                {
                    firstTeamName = "🥇" + firstTeamName;
                }
            }

            if (match.SecondTeam is not null)
            {
                var secondTeam = Program.TeamService.GetTeam(match.SecondTeam.Value);

                secondTeamName = secondTeam.Name;

                if (match.Winner == secondTeam.Id)
                {
                    secondTeamName = "🥇" + secondTeamName;
                }
            }

            return (firstTeamName, secondTeamName);
        }

        public void SetAbsoluteLayout(Point location)
        {
            LayoutStyle = LayoutStyle.Absolute;
            Frame = new Rect(location, new Size(WidthConst, HeightConst));
        }
    }
}
