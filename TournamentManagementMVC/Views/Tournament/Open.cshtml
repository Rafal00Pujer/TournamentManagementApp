@using System.Diagnostics
@using TournamentManagementLogic.Model
@model TournamentManagementLogic.Model.TournamentModel

@{
    ViewData["Title"] = Model.Name;
}

<div class="row pt-3 text-center bg-primary text-white bg-opacity-75">
    <div class="col-sm-12">
        <h1>@Model.Name</h1>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(Model.GameName))
{
    <div class="row pt-3 text-center bg-primary text-white bg-opacity-75">
        <div class="col-sm-12">
            <h2>@Model.GameName</h2>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(Model.Description))
{
    <div class="row pt-3 text-center bg-primary text-white bg-opacity-75">
        <div class="col-sm-12">
            <p>@Model.Description</p>
        </div>
    </div>
}

@{
    var numOfRounds = 0;

    var n = 1;
    while (n <= Model.Matches.Count)
    {
        numOfRounds += 1;
        n *= 2;
    }

    var firstRoundsNames = new[] { "Finals", "Semi Finals", "Quarter Finals" };
    var roundsNames = new List<(string codeName, string displayName)>();

    for (var i = 0; i < numOfRounds; i++)
    {
        string displayName;

        if (i < firstRoundsNames.Length)
        {
            displayName = firstRoundsNames[i];
        }
        else
        {
            var roundNum = numOfRounds - i;
            displayName = $"Round {roundNum}";
        }

        var codeName = displayName.Replace(' ', '-').ToLower();

        roundsNames.Add((codeName, displayName));
    }
}

<div class="row text-center mt-1 mb-2 pt-4 pb-4 bg-secondary bg-opacity-10 border-top">
    <nav>
        <div class="nav nav-pills justify-content-center" id="rounds-tab" role="tablist">
            @for (var i = roundsNames.Count - 1; i >= 0; i--)
            {
                <button class="nav-link @(i == roundsNames.Count-1 ? "active" : "")" id="rounds-@roundsNames[i].codeName-tab"
                        data-bs-toggle="pill" data-bs-target="#rounds-@roundsNames[i].codeName" type="button" role="tab"
                        aria-controls="rounds-@roundsNames[i].codeName" aria-selected="true">
                    @roundsNames[i].displayName
                </button>
            }
        </div>
    </nav>
</div>
<div class="tab-content" id="rounds-tabContent">
    @{
        var currentTabQueue = new Queue<MatchModel>();
        var nextTabQueue = new Queue<MatchModel>();

        currentTabQueue.Enqueue(Model.FinalMatch);

        for (var i = 0; i < roundsNames.Count; i++)
        {
            <div class="tab-pane fade @(i == roundsNames.Count-1 ? "show active" : "")"
                 id="rounds-@roundsNames[i].codeName" role="tabpanel" aria-labelledby="rounds-@roundsNames[i].codeName-tab" tabindex="0">

                @{
                    while (currentTabQueue.Count > 0)
                    {
                        var match = currentTabQueue.Dequeue();

                        if (match.FirstPreviousMatch is not null)
                        {
                            nextTabQueue.Enqueue(match.FirstPreviousMatch);
                        }

                        if (match.SecondPreviousMatch is not null)
                        {
                            nextTabQueue.Enqueue(match.SecondPreviousMatch);
                        }

                        var additionalColumns = new List<(string firstTeamCol, string secondTeamCol)>();

                        if (match.Winner is not null)
                        {
                            if (match.Winner == match.FirstTeam)
                            {
                                additionalColumns.Add(("🥇", ""));
                            }
                            else if (match.Winner == match.SecondTeam)
                            {
                                additionalColumns.Add(("", "🥇"));
                            }
                        }

                        switch (match.Sets.Count)
                        {
                            case > 3:
                                additionalColumns.Add((match.Sets[0].FirstTeamScore, match.Sets[0].SecondTeamScore));
                                additionalColumns.Add(("...", "..."));
                                additionalColumns.Add((match.Sets[^1].FirstTeamScore, match.Sets[^1].SecondTeamScore));
                                break;
                            case > 0:
                                additionalColumns.AddRange(match.Sets.Select(matchSet => (matchSet.FirstTeamScore, matchSet.SecondTeamScore)));
                                break;
                        }

                        @if (match.Date is not null)
                        {
                            <div class="row pt-2 pb-2 bg-info text-black bg-opacity-75 border-bottom border-dark justify-content-center">@match.Date</div>
                        }

                        <div class="row pt-2 pb-2 bg-info text-black bg-opacity-75 border-bottom border-dark">

                            @if (match.FirstTeam is not null)
                            {
                                <div class="col-@(12 - additionalColumns.Count) text-start">@match.FirstTeam.Name</div>

                                @foreach (var additionalColumn in additionalColumns)
                                {
                                    <div class="col-1 text-center border-start border-dark">@additionalColumn.firstTeamCol</div>
                                }
                            }
                            else
                            {
                                <div class="col-12 text-start">-</div>
                            }

                        </div>

                        <div class="row pt-2 pb-2 bg-info text-black bg-opacity-75">

                            @if (match.SecondTeam is not null)
                            {
                                <div class="col-@(12 - additionalColumns.Count) text-start">@match.SecondTeam.Name</div>

                                @foreach (var additionalColumn in additionalColumns)
                                {
                                    <div class="col-1 text-center border-start border-dark">@additionalColumn.secondTeamCol</div>
                                }
                            }
                            else
                            {
                                <div class="col-12 text-start">-</div>
                            }
                        </div>

                        <div class="row mt-1 mb-3">
                            <a asp-controller="Match" asp-action="Edit" asp-route-matchId="@match.Id" type="button" class="btn btn-secondary">Edit</a>
                        </div>
                    }

                    currentTabQueue = nextTabQueue;
                    nextTabQueue = new Queue<MatchModel>();
                }

            </div>
        }
    }
</div>
