@using System.Diagnostics
@using TournamentManagementLogic.Model
@model TournamentManagementLogic.Model.TournamentModel

@{
    ViewData["Title"] = Model.Name;
}

<div class="row pt-3 text-center bg-primary text-white bg-opacity-75">
    <div class="col-sm-12">
        <h1>@Model.Name</h1>
    </div>
</div>

@if (!string.IsNullOrWhiteSpace(Model.GameName))
{
    <div class="row pt-3 text-center bg-primary text-white bg-opacity-75">
        <div class="col-sm-12">
            <h2>@Model.GameName</h2>
        </div>
    </div>
}

@if (!string.IsNullOrWhiteSpace(Model.Description))
{
    <div class="row pt-3 text-center bg-primary text-white bg-opacity-75">
        <div class="col-sm-12">
            <p>@Model.Description</p>
        </div>
    </div>
}

@{
    var numOfRounds = 0;

    var n = 1;
    while (n <= Model.Matches.Count)
    {
        numOfRounds += 1;
        n *= 2;
    }

    var firstRoundsNames = new[] { "Finals", "Semi Finals", "Quarter Finals" };
    var roundsNames = new List<(string codeName, string displayName)>();

    for (var i = 0; i < numOfRounds; i++)
    {
        string displayName;

        if (i < firstRoundsNames.Length)
        {
            displayName = firstRoundsNames[i];
        }
        else
        {
            var roundNum = numOfRounds - i;
            displayName = $"Round {roundNum}";
        }

        var codeName = displayName.Replace(' ', '-').ToLower();

        roundsNames.Add((codeName, displayName));
    }
}

<div class="row text-center mt-1 mb-2 pt-4 pb-4 bg-secondary bg-opacity-10 border-top">
    <nav>
        <div class="nav nav-pills justify-content-center" id="rounds-tab" role="tablist">
            @for (var i = roundsNames.Count - 1; i >= 0; i--)
            {
                <button class="nav-link @(i == roundsNames.Count-1 ? "active" : "")" id="rounds-@roundsNames[i].codeName-tab"
                        data-bs-toggle="pill" data-bs-target="#rounds-@roundsNames[i].codeName" type="button" role="tab"
                        aria-controls="rounds-@roundsNames[i].codeName" aria-selected="true">
                    @roundsNames[i].displayName
                </button>
            }
        </div>
    </nav>
</div>
<div class="tab-content" id="rounds-tabContent">
    @{
        var currentTabQueue = new Queue<MatchModel>();
        var nextTabQueue = new Queue<MatchModel>();

        currentTabQueue.Enqueue(Model.FinalMatch);

        for (var i = 0; i < roundsNames.Count; i++)
        {
            <div class="tab-pane fade @(i == roundsNames.Count-1 ? "show active" : "")"
                 id="rounds-@roundsNames[i].codeName" role="tabpanel" aria-labelledby="rounds-@roundsNames[i].codeName-tab" tabindex="0">

                @{
                    while (currentTabQueue.Count > 0)
                    {
                        var match = currentTabQueue.Dequeue();

                        if (match.FirstPreviousMatch is not null)
                        {
                            nextTabQueue.Enqueue(match.FirstPreviousMatch);
                        }

                        if (match.SecondPreviousMatch is not null)
                        {
                            nextTabQueue.Enqueue(match.SecondPreviousMatch);
                        }

                        var additionalColumns = new List<(string firstTeamCol, string secondTeamCol)>();

                        if (match.Winner is not null)
                        {
                            if (match.Winner == match.FirstTeam)
                            {
                                additionalColumns.Add(("🥇", ""));
                            }
                            else if (match.Winner == match.SecondTeam)
                            {
                                additionalColumns.Add(("", "🥇"));
                            }
                        }

                        switch (match.Sets.Count)
                        {
                            case > 3:
                                additionalColumns.Add((match.Sets[0].FirstTeamScore, match.Sets[0].SecondTeamScore));
                                additionalColumns.Add(("...", "..."));
                                additionalColumns.Add((match.Sets[^1].FirstTeamScore, match.Sets[^1].SecondTeamScore));
                                break;
                            case > 0:
                                additionalColumns.AddRange(match.Sets.Select(matchSet => (matchSet.FirstTeamScore, matchSet.SecondTeamScore)));
                                break;
                        }

                        @if (match.Date is not null)
                        {
                            <div class="row pt-2 pb-2 bg-info text-black bg-opacity-75 border-bottom border-dark justify-content-center">@match.Date</div>
                        }

                        <div class="row pt-2 pb-2 bg-info text-black bg-opacity-75 border-bottom border-dark">

                            @if (match.FirstTeam is not null)
                            {
                                <div class="col-@(12 - additionalColumns.Count) text-start">@match.FirstTeam.Name</div>

                                @foreach (var additionalColumn in additionalColumns)
                                {
                                    <div class="col-1 text-center border-start border-dark">@additionalColumn.firstTeamCol</div>
                                }
                            }
                            else
                            {
                                <div class="col-12 text-start">-</div>
                            }

                        </div>

                        <div class="row pt-2 pb-2 bg-info text-black bg-opacity-75">

                            @if (match.SecondTeam is not null)
                            {
                                <div class="col-@(12 - additionalColumns.Count) text-start">@match.SecondTeam.Name</div>

                                @foreach (var additionalColumn in additionalColumns)
                                {
                                    <div class="col-1 text-center border-start border-dark">@additionalColumn.secondTeamCol</div>
                                }
                            }
                            else
                            {
                                <div class="col-12 text-start">-</div>
                            }
                        </div>

                        <div class="row mt-1 mb-3">
                            <a asp-controller="Match" asp-action="Edit" asp-route-matchId="@match.Id" type="button" class="btn btn-secondary">Edit</a>
                        </div>
                    }

                    currentTabQueue = nextTabQueue;
                    nextTabQueue = new Queue<MatchModel>();
                }

            </div>
        }
    }
</div>

@* Delete button *@
<button type="button" class="btn btn-danger col-1"
        data-bs-toggle="modal" data-bs-target="#deleteTournamentModal"
        data-bs-toggle-tooltip="tooltip" data-bs-trigger="hover" data-bs-title="Delete tournament">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z" />
        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z" />
    </svg>
</button>

@* Delete Tournament Modal *@
<div id="deleteTournamentModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Delete tournament</h1>
                <button class="btn-close" type="button" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <span>Are you sure you want to remove this tournament?</span>
            </div>
            <div class="modal-footer">
                <a class="btn btn-danger px-5 mx-5" asp-action="Delete" asp-route-tournamentId="@Model.Id">Yes</a>

                <button class="btn btn-primary px-5 mx-5" type="button" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
    {
    @* tooltips *@
    <script type="text/javascript">
        tooltipTriggerList = document.querySelectorAll('[data-bs-toggle-tooltip="tooltip"]');
        tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    </script>
}